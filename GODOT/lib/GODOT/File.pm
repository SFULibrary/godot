##
## Copyright (c) 2009, Kristina Long, Simon Fraser University
##
package GODOT::File;

use CGI qw(:escape);
use GODOT::Debug;

use Exporter;

@ISA = qw(Exporter);

@EXPORT = qw(get_tmp_file_new_id
             get_tmp_file_for_id);

use strict;

##
## -assumes that srand has already been called
## -assumes $dirname does NOT have a trailing '/'
##
## -returns (<filename>, <id generated by rand>) or () on error
##
sub get_tmp_file_new_id {
    my($dirname, $prefix, $suffix, $retry, $rand_max) = @_;

    my $rand_max_len = length($rand_max);
    my $rand_id_fmt = '%0' . $rand_max_len . 'd'; 

    my @try_arr;
    my $i;
    for ($i=0; $i < $retry; $i++) {

        my $rand_id_string = sprintf($rand_id_fmt, int(rand($rand_max)));
        my $filename = sprintf("%s/%s%s.%s", $dirname, $prefix, $rand_id_string, $suffix);
        push(@try_arr, $filename);

        if (! (-e $filename)) { return ($filename, $rand_id_string); }
    }

    ##
    ## -failure so send back error message that includes filenames that were tried
    ##
    error "filenames tried for temporary file:  " . join(', ', @try_arr);
    return ();
}

##
## -returns (<filename>, <id generated by rand>) or () on error
##
sub get_tmp_file_for_id {
    my($dirname, $prefix, $suffix, $rand_id_string) = @_;

    my $filename = sprintf("%s/%s%s.%s", $dirname, $prefix, $rand_id_string, $suffix);
    return ($filename, $rand_id_string);
}

1;

__END__




